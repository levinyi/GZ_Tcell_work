import sys
import os
import re
import argparse
import openpyxl
import pandas as pd


def usage():
    '''
    updated:
    20220520: Created

    '''.format(sys.argv[0])

def _argparse():
    parser = argparse.ArgumentParser(description="This is description")
    parser.add_argument('-f1', '--infofile', action='store', dest='count_file',   help="count file, usually named G260E2L1.pair.count.txt")
    parser.add_argument('-f2', '--wellfile', action='store', dest="frequ_file",   help="frequency file, usually named G260E2L1.pair.acc_freq.txt")
    parser.add_argument('-f3', '--TCRdbfile',action='store', dest="summa_file",   help="sum file which generated by SnS_QC_Statistic_step1_sum_add_freq.py")
    parser.add_argument('-n', '--total_num', action='store', type=int, dest="total_number", help="total TCR number")
    parser.add_argument('-f', '--freq',      action='store', type=float, dest="frequency",    help="tcr frequency")
    parser.add_argument('-u', '--umi',      action='store', type=int, dest="umi", help="umi number")
    return parser.parse_args()


def read_384_wells(wells_file):
    """store a dict"""
    wells_dict = {}
    wb = openpyxl.load_workbook(wells_file)
    
    for sheetname in wb.sheetnames:
        ws = wb[sheetname]
        # print("your 384 worksheet size is {}".format(ws.dimensions))
        df = pd.DataFrame(ws.values).set_index(0)
        df.rename(columns=df.iloc[0])
        df = df[1:]
        df.index.names=[None]
        df = df.T
        a_dict = df.to_dict()
        wells_dict.setdefault(sheetname, a_dict)

    return wells_dict


def read_TCRdb_file(tcr_db_file):
    well_dict = {}
    with open(tcr_db_file,"r") as f:
        for line in f:
            line = line.rstrip("\n")
            if line.startswith("Stock"):
                continue
            a,b,c = line.split("\t")
            well_dict.setdefault(a,{})['96well'] = b
            well_dict.setdefault(a,{})['384well'] = c
    return well_dict


def calculate_well():
    well_list = []
    for j in range(1,13):
        for i in range(ord('A'),ord('H')+1):
            well_list.append(chr(i)+str(j))
    return well_list


def deal_with_main_file(main_file, well_dict, tcrdb_dict):
    wb = openpyxl.load_workbook(main_file)
    well_num = calculate_well()
    well_sheets_name = list(well_dict.keys())
    # print(list(well_sheets_name))
    ################ for CDR3
    worksheets=["Echo_calculate_forCDR3aJ","Echo_calculate_forCDR3bJ",]
    prog = re.compile(r'([A-Z])(\d*)')
    for worksheet in worksheets:
        ws = wb[worksheet]
        i = 0
        for row in ws.iter_rows(min_row=2, min_col=1):
            result = prog.match(row[1].value)
            a, b = result.group(1, 2)
            volume = well_dict[well_sheets_name[0]][a][int(b)]
            print("{}\tTempPlate1\t{}\tDestPlate1\t{}\t{}\t{}".format(worksheet, row[1].value, well_num[i], volume, row[0].value))
            i += 1
    
    ################ for TSV 
    worksheets=["Echo_calculate_forTSV-A","Echo_calculate_forTSV-B",]
    for worksheet in worksheets:
        ws = wb[worksheet]
        i = 0
        for row in ws.iter_rows(min_row=2, min_col=1):
            tcr = row[0].value
            well_96  = tcrdb_dict[tcr]['96well']
            well_384 = tcrdb_dict[tcr]['384well']
            result = prog.match(well_384)
            a, b = result.group(1, 2)
            volume = well_dict[well_sheets_name[1]][a][int(b)]
            print("{}\tTSVPlate2\t{}\tDestPlate1\t{}\t{}\t{}".format(worksheet, well_384, well_num[i], volume, tcr))
            i += 1


def main():
    file1 = "test.input.xlsx"
    file2 = "test.384wells.xlsx"
    file3 = "../TSV_wells_map.txt"
    
    well_dict = read_384_wells(file2)
    # print(well_dict)
    tcrdb_dict = read_TCRdb_file(file3)
    # print(tcrdb_dict)
    print("TCR ID\tSource Plate Name\tSource Well\tDestination Plate Name\tDestination Well\tTransfer volume\tTCR ID".format())
    deal_with_main_file(file1, well_dict, tcrdb_dict)


if __name__ == '__main__':
    main()
